/*  css Kommentare sind wie Java-Block-Kommentare
    Intellij erkennt die CSS-Datei und hat dann eine Codeergänzung, die man gut nutzen kann.
*/
/*
Um CSS zu beherrschen, muss man die folgenden Dinge verstehen

    - Selektoren
    - Schrift und Text gestalten
    - Abstände und Rahmenlinien
    - Positionierung und Layout
*/

/*
    Wo kann man CSS definieren?
    1. in einer externen CSS-Datei
    2. im Head einer Webseite im Element Style
    3. im öffnenden Element im style-Attribut (wird auch inline-Style genannt)

*/

/*
    Farben kann man entweder mit Namen oder Hexadezimal angeben:
    background-color: black;
    background-color: #000000;
    background-color: rgb(rrr, ggg, bbb) kann man dann mit Dezimalwerten von 0 bis 255 schreiben
    background-color: rgb(0,0,0)
    background-color: rgba(0, 0, 0, 0.5) der letzte Wert steht für den Alpha-Kanal (0 bis 1.0), also die Transparenz

    Auch die hexadezimale Angabe kann man mit Alpha-Kanal machen, ältere Browser erkennen aber eher die rgba - Methode.




*/


/*  padding kann man mit Polsterung übersetzen, dann hat man gleich einen Eindruck von der Eigenschaft.

    Allgemein ist eine CSS-Eigenschaft folgendermaßen aufgebaut:

        Selektor {
            Eigenschaft: Wert;
            Eigenschaft: Wert;
        }

Steht zwischen den Selektoren kein Komma, heißt das, dass beide HTML-Elemente in der Reihenfolge kommen müssen,
nur dann wird das Stylesheet angewendet. Steht ein Komma dazwischen, heißt das, dass die folgenden Style-Angaben für
alle durch Komma getrennten Tags gelten.

Elementselektor
---------------
    man gibt einfach den Namen des HTML-Elements an, das gestaltet werden soll
    p {
        color: #333333;
    }

    // zwei Elemente, die beide dieselben Eigenschaften haben sollen, siehe oben, werden durch Komma getrennt
    nav, footer {
        background-color: #333333;
        color: white;
    }

    // Lässt man das Komma weg, hat man den sogenannten Nachfahrenselektor, dann gilt der Style nur,
    // wenn der Vorgänger ein nav ist für den footer.
    nav footer {
        background-color: #333333;
        color: white;
    }

Universalselektor
-----------------
Man nutzt ihn selten, es gibt ihn aber dennoch, einen Selektor für alles...
* {
    box-sizing: border-box;
}

Class-Selektor
--------------
Der Class-Selektor selektiert die Elemente mit dem genannte class-Attribut
Man kann damit

    1. gleichnamige Elemente getrennt gestalten
    2. Elemente zur gemeinsamen Gestaltung gruppieren

.site-header {
    ...
} // spricht die Elemente an, die die Klasse site-header besitzen

Will man die Klassen auf einen Elementtyp beschränken, stellt man den Element-Namen davor:

article.infobox {
    text-align: center;
    background-color: white;
} // jetzt wird nur noch ein article-Element mit der Klasse infobox durch diesen Eintrag beschrieben.

Ein HTML-Element kann mehrere Klassennamen besitzen:

<body class="startseite full-width">

Dieses Element kann jetzt mit beiden Selektoren ausgewählt werden.

Will man nur Elemente selektieren, die beide Klassen besitzen, so kann man dies mit folgendem Selektor:

.startseite.ful-with {
    ...
}

ID-Selektor
-----------
<main id="content">

kann man mit dem folgenden Selektor auswählen:

#content {
    background-color: #eeeeee;
}

ID-Selektoren sind sehr spezifisch und stehen sehr hoch in der Hierarchie, daher sollte man sie sparsam verwenden.

Nachfahrselektor
----------------
// Zu dem oben gesagten muss man ergänzen, dass  alle Anchor-Elemente unterhalb von site-nav
// durch den Selector ausgewählt werden.

.site-nav a {
    ...
}

Kindselektor
------------
// Will man nur die direkten Kinder auswählen, muss man das Größerzeichen verwenden
// Der Kindselektor ist also präziser als der Nachfahrselektor...

.site-nav > a {
    ...
}

Hier muss man natürlich aufpassen. Ändert sich die Struktur der Seite, zieht der entsprechende
CSS-Selektor nicht mehr.

Pseudoklassen
-------------
nav li:last-child
nav li:first-child

sind Pseudoklassen, die nicht in den Tags stehen müssen und nur das erste bzw. letzte Kind selektieren.

Es gibt auch noch Geschwister-Selektoren + und ~

    +   ->  nur das benachbarte Geschwisterelement
    ~   ->  alle Geschwisterelemente

Attributselektoren
------------------
Attributselektoren haben eckige Klammern

Gestaltung von Text
===================
Firefox bietet eine sehr gute Möglichkeit zur Analyse der angezeigten Schriftart.

    body {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        font-size: 1rem;                            // es geht auch smaller oder larger
        line-height: normal;                        // 1.5 (ohne Einheit) ist eine alternative Notation
        font-weight: normal oder bold;              // steuert die Strichstärke mit Werten zwischen 100 und 900
        font-style: normal oder italic;             // erklärt sich von selbst
        font-variant: small-caps;                   // Kapitälchen
        text-align: left, center, right, justify;   // Textausrichtung im Block
        text-ident: 2em oder -2em;                  // Einzug der ersten Zeile nach rechts oder links
        text-shadow:                                // Text mit Schatten, die Einstellungen bei Bedarf ansehen
        letter-spacing: 1px;                        // ist der Abstand zwischen den Zeichen
     }

    Man sollte sich auch immer überlegen, ob die Systemschriftarten eine Lösung sein könnte.
    Diese benötigen keine Ladezeit und zeigen dem User das Gewohnte.

    Webfonts bieten dann noch die Möglichkeit, die Schriftart mit zu laden, sodass die Seite
    auf allen Rechnern gleich aussieht. Um rechtliche Probleme zu umgehen, nutzt man google-fonts.
    Die google-fonts darf man auch auf seinem eigenen Rechner hosten, dann hat man nicht das Datenschutz-
    rechtliche Problem, dass man Zugriffe auf google-Seiten durchführt.

    Pseudoklassen für Links:
    ------------------------
    Im CSS kann man über Pseudoklassen das Aussehen für besuchte und für Links bestimmen. Man erkennt die
    Pseudoklassen an dem Doppelpunkt:

    a:link {
        color: #0b74b8;
    }

    a:visited {
        color: #36abde;
    }

    Weitere Pseudoklassen
    ---------------------
    :hover      ->  Mauszeiger über dem Element
    :focus      ->  Durchsteppen per TAB-Taste
    :active     ->  Moment der Aktivierung


Das CSS-Box-Modell
==================
    p-b-m beschreibt die Bestandteile des Box-Modells.
    padding - border - margin
    Innenabstand, Polsterung    -   Rahmenlinie, Rand der Box   -    Außenabstand

padding
    padding-top
    padding-right
    padding-left
    padding-bottom

border
    border-top
    border-right
    border-left
    border-bottom
    border-width
    border-style    -> solid, dashed, dotted
    border-color

margin
    margin-top
    margin-right
    margin-left
    margin-bottom

margin: auto zentriert Boxen horizontal. Beispiel:

        body {
            background-color: white;
            max-width: 600px;
            margin: auto;
        }

Vertikale Außenabstände und collapsing Margins
==============================================
Es gelten folgende Regeln:
    - wenn vertikale Außenabstände zweier Boxen einander Berühren, verschmelzen sie.
    - haben sie den gleichen Wert, wird nur einer übernommen.
    - bei unterschiedlichen Werten bleibt der größere erhalten.

Um Probleme mit den collapsing Margins zu vermeiden kann man folgenden Trick benutzen:

h1, h2, h3, h4, h5, h6, p, ul, ol, blockquote {
    margin-top: 0;
}

Das Border-Box-Modell
=====================
Das Border-Box-Modell weicht vom klassischen Box-Modell ab, indem width den Inhaltsbereich plus den Border-Bereich
bis zur Außenseite der Border-Box beschreibt. Das ist etwas natürlicher, da dann width wirklich beschreibt, wieviel

Das Border-Box-Modell wird mit der Anweisung

    box-sizing: border-box

aktiviert. Die Standardeinstellung für das normale Box-Modell ist:

    box-sizing: content-box

Eine gute Stelle dafür ist ausnahmsweise der Universalselektor, damit die Einstellung für alle Elemente gilt:

*, *::before, *::after {  // ::before und ::after sind Pseudoelemente
    box-sizing: border-box;
}

Hintergrundgrafik
=================
Bilder mit Informationsgehalt werden mit dem HTML-img-Element auf einer Seite eingebunden. Für Hintergrundgrafiken
gibt es ergänzend die CSS-Möglichkeit des background-image.

html {
    background-color: whitesmoke;
    background-image: url(bilder/hintergrund.png);
    background-repeat: repeat oder repeat-y oder repeat-x oder no-repeat // Standard ist repeat;
    background-position: left, top;
    background-attachment: fixed; // oder scroll als Standard die Grafik bewegt sich nicht mit, bei fixed schon
    background-size: contain oder cover, gutes Beispiel ist auf der self-html-Seite

}

Man sollte immer eine Hintergrundfarbe angeben, denn wenn das Bild einmal nicht angezeigt werden kann,
wird die Hintergrundfarbe angezeigt.

Box Layout gestalten
================
Für Schatten gibt es die Eigenschaft

    box-shadow      ->  die genaue Syntax schaut man sich bei Bedarf an. Wichtig ist, ein Schatten vergrößert die
                        Box nicht und ragt u.U. sogar in die nächste Box hinein.

Für abgerundete Ecken gibt es die Eigenschaft

    border-radius   ->  hier gilt dasselbe wie beim Schatten, ansehen wenn nötig.

Lineare Farbverläufe gestaltet man mit

    background-image: linear-gradient(green, blue);

Standardmäßig ist die Richtung von oben nach unten. Um eine Richtung vorzugeben, gibt es das Schlüsselwort

    to bottom, to top, to right, to left...

    background-image: linear-gradient(to right, green, blue);

diagonale Farbverläufe erreicht man durch zwei Richtungsangaben

    background-image: linear-gradient(to right bottom, green, blue);

Um Boxen beim Überfahren mit der Maus zu verändern, nutzt man die transition. Auch die guckt man sich besser
bei Bedarf an, man sollte aber wissen, dass es sie gibt.

Im Buch wird ein Beispiel gezeigt, wie man Links mit einem Unicodezeichen erweitern kann, um anzuzeigen,
dass der Link auf eine externe Seite springt. Hier ein Beispiel:

    .site-content a[href^="http"]::after {
        content: " \2197";
    }

// ::after ist ein Pseudoelement, weil es sozusagen in das HTML eingefügt wird, ohne dass es darin vorhanden ist.
           genau genommen werden die Inhalte in das Element eingefügt und zwar vor oder nach dem Elementinhalt,
           je nachdem, welches Pseudoelement man verwendet.


Einheiten und Größen in CSS
===========================
rem         ->  root em = root-Element  entspricht der Schriftgröße, die für das Wurzelelement (html-Element)
                                        festgelegt wurde.
em          ->  Element                 bezieht sich auf das aktuelle Element, wobei zu unterscheiden ist, ob
                                        man die Schriftgröße betrachtet, dann bezieht sich em auf das umschließende
                                        Element, bei den anderen Größen auf das Element selbst.
%           ->  Prozent                 beziehen sich in der Regel auf das umgebende Element.
*/

/* Ein Eintrag, der mit einem Punkt beginnt, bezieht sich auf eine Klasse innerhalb eines HTML-Elements.
   Man benutzt einen Klassenselektor.

Struktur und Ordnung in Stylesheets
===================================
@import-Anweisungen müssen am Anfang eines Stylesheets stehen, vor allen anderen CSS-Regeln.
Folgende Syntax-Möglichkeiten bestehen:

    @import url("dateiname.css");

oder aber auch

    @import "dateiname.css";

Man beachte die Reihenfolge der Imports, denn manchmal ist sie bei der Bewertung wichtig, ob ein
Style angezogen wird oder nicht. Die Reihenfolge der Imports legt fest, was in der "Gesamt-Style-Sheet-Datei" oben
steht.


Responsives Design mit Media-Queries
====================================
Die wichtigsten Medientypen, die in CSS heute noch benutzt werden sind:
all         ->  für alle Ausgabemedien
screen      ->  für Bildschirme aller Art und Größe
print       ->  für Drucker und die Druckvorschau am Bildschirm

Eine Druckausgabe als "print" erfolgt auf die via

    @media print {
        hier ständen jetzt die Regeln für die Druckausgabe.
        Hierin arbeitet man wieder wie mit normalem CSS.
    } Ende @media print

    eine Übungsdatei von mir angepasst gibt es im Kapitel 19 unter dem Namen print.css

Media-Queries kann man noch um Abfragen für Eigenschaften des Ausgabegerätes erweitern:

    @media screen and (min-width: 600px) and max-width(767px) {
        hier ständen jetzt die Regeln
    }

Die Umbruchstelle bei einer Media-Query wird Breakpoint genannt.
Natürlich sind auch mehrere Breakpoints in einer Datei möglich.

Die wichtigsten abzufragenden Eigenschaften sind:
    - width
    - height
    - orientation
    - resolution

Bei den Media-Queries ist der Meta-Viewport wichtig, weil ansonsten auf mobilen
Geräten Probleme entstehen können. Dieser muss allerdings im HTML und nicht im CSS
definiert sein. In folgenden Versionen könnte sich dies ändern.

Hintergrund ist, dass viele mobile Browser einen virtuellen Viewport definiert haben,
damit die Webseite komplett dargestellt wird. Dies stärt natürlich die eigene Definition.
Daher schaltet man über den Meta-Viewport den Virtuellen Viewport sozusagen aus.

Idealerweise macht man die Breakpoints nicht von irgendwelchen Bildschirmbreiten von
Standardtablets oder I-Phones abhängig, weil die sich im Laufe der Zeit ändern können. Besser
ist es, das Layout vom HTML abhängig zu machen.


Zweispaltiger Text
==================
Mit Hilfe der Media-Queries kann man bei sehr breiten Bildschirmen den Text
zweispaltig darstellen, dann ist er deutlich besser lesbar:

column-rule erzeugt eine Trennlinie, diese ist optional und muss man sich in einem
konkreten Fall ansehen.

@media screen and (min-width: 600px) {
    p {
        column-count: 2;
        column-gap: 4rem;
        column-rule: 1px solid #eee;
    }
}


Flow und die Eigenschaft position
=================================
Ohne weitere Aktion arbeitet man im Browser nach dem Erstellen einer Website im
Modus

    Block-Formatting Context

der durch das Stamm-HTML-Element html erzeugt und festgelegt wird.

Der Flow folgt den Regeln:
==========================

    1) Blockboxen werden soweit wie möglich oben links platziert und antomatisch so breit wie
       die umgebende Box.

    2) Inline-Boxen werden soweit wie möglich oben links platziert, werden aber nur so breit wie
       ihr Inhalt. Weitere inline-Boxen folgen in derselben Zeile. Wenn rechts nicht mehr genügend
       Platz ist, rutschen sie eine Zeile tiefer und beginnen wieder ganz links.

    3) Inline-Blockboxen sind eine Mischung. Sie können mit dem Blockboxmodell formatiert werden
       aber auch wie Inline-Boxen nebeneinander stehen.

Das Verhalten einer Box kann man mit Werten wie

    display: block, inline oder inline-block

verändern, das oben beschriebene Verhalten der Boxen untereinander bleibt jedoch immer erhalten.

Die position kann die 5 Werte

    static      ->  normale Position im oben beschriebenen Flow
    relative    ->  schützt den ursprünglichen Platz der Box und verschiebt relativ zu dieser
                    ursprünglichen Position
    absolute    ->  werden aus dem Flow genommen und die Position bezieht sich auf die nächste
                    umgebende positionierte Box. Falls keine umgebende Box vorhanden ist, bezieht
                    sich die Positionierung auf das HTML-Stammelement html.
    fixed       ->  verhält sich wie position absolute, scrollt aber nicht mit. Der Bezugs-
                    punkt ist nicht das drüberliegende Element sondern der Viewport.
                    Der Webdesigner ist dafür verantwortlich, dass nicht versehentlich andere
                    Inhalte verdeckt werden.
    sticky      ->  sorgt für Scrollen und dann stehen bleiben. Das Element bewegt sich zunächst
                    mit dem Flow, bleibt dann aber bei Erreichen eines bestimmten Punktes stehen,
                    wodurch der Inhalt quasi über der Website schwebt und der Rest der Seite unter
                    dem Element weiter fließt.

annehmen.


Der Z-Index
===========
Positionierte Elemente haben eine z-Index. Wenn ein Element positioniert wird, bekommt
es den

    z-Index: auto.

Bei gleichem z-Index entscheided die Reihenfolge der Elemente im Quelltext. Später
erscheinende Elemente werden vor weiter oben sthenden Elementen platziert.

Der z-Index gilt nur für positionierte Boxen und ist nur relevant, wenn Boxen sich
überlagern.

Hier ein sehr einfaches Beispiel aus dem Buch:

div.eins {
    z-index: 30;
}


floaten
=======
Mit floaten kann man Bilder und Fließtext zueinander positionieren, sodass z.B. ein
Bild von einem Text umflossen wird.

Der Inhalt nachfolgender Elemente umfließt das gefloatete Element. Die Eigenschaften

    background
    padding
    border und
    margin

rutschen aber darunter

Gefloatete Elemente erzeugen immer eine Blockbox.
Mit clear kann man die floating-Eigenschaften wieder aufheben.

Hier noch ein Beispiel Quelltext für das Floaten:

==============Anfang float==================================

.float-rechts {
  float: right;
  margin: 0 0 0 1rem;
}

.float-links {
  float: left;
  margin: 0 1rem 0 0;
}

.float-stoppen {
  clear: both;
}

figure[class*="float-"] {
  text-align: center;
}


.float-umschliessen {
  overflow: hidden;
}

@supports (display: flow-root) {

  .float-umschliessen {
    display: flow-root;
    overflow: initial;
  }

}

===============Ende float=================================


Gestalten per Flexbox
=====================
Alles bisherige CSS basierte auf dem Block-Formatting-Context
Für die Positionierung der Boxen hat man darin lediglich die Möglichkeiten
    - display: inline
    - display: inline-block
    - position wie oben beschrieben
    - float wie oben beschrieben

Das Flexbox-Layout arbeitet zwar auch mit diesem Block-Formatting-Context,
jedoch kann man via

    display: flex;

einen Flex-Container definieren. Alle Kindelemente dieses Elternelements werden
dann automatisch zu Flex-Items. Im Firefox gibt es einen eigenen Flexbox-Analyzer.

Eine Flexbox besteht im Standard immer nur aus einer Zeile, evtl. fließt der Inhalt
aus der Seite. Wenn man mehrere Zeilen in einer Flexbox zulassen möchte, gibt es
dafür

    flex-wrap: wrap

Das erlaubt dem Browser bei Bedarf mehrere Zeilen zu erzeugen. Auch eine Flex-Richtung
kann man mit

    flex-direction: column oder row

festlegen. Zur Gestaltung der Flex-Box gibt es viele weitere Möglichkeiten, die
man sich bei Bedarf ansehen muss. Diese hier alle aufzuführen, wäre zu viel.

    justify-content: verteilt den Leerraum entlang der Hauptachse

Die Eigenschaft flex für die Flex-Items ist kurz für:

    flex-grow       erlaubt Flex-Items zu wachesn
    flex-shrink     erlaubt Flex-Items zu schrumpfen
    flex-basis      definiert eine gewünschte Ausgangsgröße


Es gibt eine Java-Script-Funktion

    this.classList.toggle()

die eine CSS-Klasse zu einem Element hinzufügt, wenn sie nicht vorhanden ist
und sie löscht, wenn sie vorhanden ist.
Eine Navigationsleiste kann man mit

    max-height: 0

ausblenden, weil max-heigt anders als

    display: none

animiert werden kann.

Gestalten per Grid Layout
=========================
Das Grid widmet sich dem Nebeneinander von Layout-Modulen.
Es wird seit 2017 von allen modernen Browsern unterstützt.
Ob ein Browser das Grid unterstützt, kann man folgendermaßen abfragen:

    @supports (display:grid) {
        hier steht dann das entsprechende CSS.
    }

 */


